findLatestCSV:

 - This function recursively searches for the latest CSV file within a given directory.
 - It initializes variables to store the path of the latest CSV file (latestCSV) and its modification time.
 - It iterates through all files and subdirectories in the specified directory.
 - If a subdirectory is found, it recursively calls itself to search for CSV files within that subdirectory.
 - If a CSV file is found and it has a modification time later than the current latest modification time, it updates latestCSV.
 - Finally, it returns the path and modification time of the latest CSV file.


parseCSV:

  - This asynchronous function reads and parses a CSV file given its file path.
  - It initializes an empty array called products to store the parsed data.
  - It returns a promise to handle asynchronous reading and parsing of the CSV file.
  - Inside the promise, it creates a read stream for the CSV file using fs.createReadStream(filePath).
  - It pipes the read stream through csvParser() to parse each row of the CSV file.
  - When a row of data is parsed successfully, it pushes the parsed row into the products array.
  - When the parsing process is complete (end event), it resolves the promise with the products array.
  - If an error occurs during reading or parsing the CSV file, it rejects the promise with the error.


getWooCommerceProducts:

 - This asynchronous function retrieves products from a WooCommerce store.
 - It sends a GET request to the WooCommerce API endpoint for products.
 - If the request is successful, it returns the data (products) from the response.
 - If an error occurs during the request, it logs the error and throws it.


compareProducts:

 - This asynchronous function compares products from a CSV file with those from the WooCommerce store and identifies new products and updated products.
 - It initializes arrays to store new products (newProducts) and updated products (updatedProducts), and a set to store existing SKUs (existingSKUs).
 - It populates the existingSKUs set with SKUs of products from the WooCommerce store.
 - It iterates through each product in the CSV file.
 - For each CSV product, it extracts its SKU and other fields.
 - If the SKU exists in the WooCommerce store, it retrieves the corresponding store product and compares their fields.
 - If any differences are found, it adds the CSV product to the updatedProducts array.
 - If the SKU doesn't exist in the store, it adds the CSV product to the newProducts array.
 - Finally, it returns an object containing arrays of new and updated products.


uploadProducts:

 - This asynchronous function uploads new products to the WooCommerce store.
 - It iterates through each new product and sends a POST request to the WooCommerce API endpoint for products to upload the product.
 - If the upload is successful, it logs a success message.
 - If an error occurs during the upload, it logs the error and throws it.


updateProducts:

 - This asynchronous function updates existing products in the WooCommerce store.
 - It iterates through each updated product and sends a PUT request to the WooCommerce API endpoint for products to update the product.
 - If the update is successful, it logs a success message.
 - If an error occurs during the update, it logs the error and throws it.


deleteProducts:

 - This asynchronous function deletes products not present in the CSV file from the WooCommerce store.
 - It receives an array of SKUs (deletedSKUs) of products that need to be deleted.
 - It iterates through each SKU and finds the corresponding product in the WooCommerce store.
 - If the product is found, it sends a DELETE request to the WooCommerce API endpoint for products to delete the product.
 - If the deletion is successful, it logs a success message.
 - If an error occurs during the deletion, it logs the error and throws it.


mainUpload:

 - This asynchronous function serves as the main entry point for the script.
 - It defines the root directory path where CSV files are located.
 - It finds the latest CSV file using the findLatestCSV function.
 - It parses the CSV file to extract product information.
 - It retrieves products from the WooCommerce store.
 - It compares CSV products with store products to identify new, updated, and deleted products.
 - It uploads new products, updates existing products, and deletes products as necessary.
 - It logs success messages for each operation.
 - If an error occurs at any step, it logs the error.
 - Finally, the mainUpload function is invoked to start the synchronization process.